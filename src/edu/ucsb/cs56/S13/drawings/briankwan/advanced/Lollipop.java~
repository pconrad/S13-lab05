package edu.ucsb.cs56.S13.drawings.briankwan.advanced;
import java.awt.geom.GeneralPath; // combinations of lines and curves
import java.awt.geom.AffineTransform; // translation, rotation, scale
import java.awt.Shape; // general class for shapes

// all imports below this line needed if you are implementing Shape
import java.awt.geom.Point2D; 
import java.awt.geom.Line2D; 
import java.awt.geom.Rectangle2D;
import java.awt.geom.Ellipse2D;
import java.awt.Rectangle;
import java.awt.geom.PathIterator;
import java.awt.geom.AffineTransform;

import edu.ucsb.cs56.S13.drawings.utilities.ShapeTransforms;
import edu.ucsb.cs56.S13.drawings.utilities.GeneralPathWrapper;
/**
   A House
      
   @author Phill Conrad 
   @version for CS56, W11, UCSB, 02/23/2011
   
*/
public class Lollipop extends Stick implements Shape
{
    /**
     * Constructor for objects of class CoffeeCup
     */
    public Lollipop(double x, double y, double width, double height)
    {
	// construct the basic house shell
	super(x,y,width,height);

	// get the GeneralPath that we are going to append stuff to
	GeneralPath gp = this.get();
	
	// Make three windows, spaced like this, where w=width/10.0;
	// | +--+ +--+ +--+ |
	// | |  | |  | |  | |
	// | +--+ +--+ +--+ |
	// |w 2w w 2w w w2 w|
	//
	// The top of window will be at y + 0.5*height and the
	// height of the window is 0.25height;
	//
	/*(())2w
	   ||
	   ||
	   w
	   Lollipop 
	   x=x-width
	   y=y-.35*height
	   candy=width*3
	   
	 */
	double a = x- width; //.55*(width-SOMETHING) OR x-width
	double b = y-.35*height; //40 OR y-.35*height
	double w = width * 2;
	double h= height-2/5*height;
	double candy = width*3;
	
	Ellipse2D.Double circle = new Ellipse2D.Double(a,b,candy,candy);
        
	
	// add the windows to the house
	// Look up the meaning of the second parameter of append
	// (Hint--is a method of "GeneralPath")

        GeneralPath pathLollipop = this.get();
        pathLollipop.append(circle, false);
      
    }

}
